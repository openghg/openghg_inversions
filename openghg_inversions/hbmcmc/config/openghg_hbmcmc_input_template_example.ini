; =======================================================================================
; Regional Hierarchical Inverse Modelling Environment Example Configuration File
; =======================================================================================
; RHIME example configuration file for CH4. Please check through variable paths and 
; names before running.
; Required inputs are marked as such.
; All other inputs are optional (defaults will be used)
; ======================================================================================= 

[INPUT.MEASUREMENTS]
; Input values for extracting observations
; species (str): Species name (check object store for options) e.g. "ch4"
; use_bc (bool): Option to solve for boundary conditions in inversion
; use_tracer (bool): Option to use tracer method for inversions
; sites (list): Site codes as a list (check object store for options) e.g. ["MHD"]
; averaging_period (list): Averaged time periods for measurements as a list (must match length of sites)
; start_date (str): Start of observations to extract (format YYYY-MM-DD)
; end_date (str): End of observations to extract (format YYYY-MM-DD) (non-inclusive)

species = "ch4"                  ; (required)
use_bc = True                    
use_tracer = False               ; (required)
sites = ["TAC", "RGL"]           ; (required)
averaging_period = ["4H", "4H"]  ; (required)
start_date = "2019-01-01"        ; (required - but can be specified on command line instead)
end_date = "2019-02-01"          ; (required - but can be specified on command line instead)

; save_merged_data (bool): If True, saves merged data object
; reload_merged_data (bool): If True, reads merged data object rather than rerunning get_data
; merged_data_dir (str): Path to directory with merged data objects.

save_merged_data = False
reload_merged_data = False
merged_data_dir = "/group/chemistry/acrg/"

; inlet (list/None): Specific measurements inlet height for the site (list - must match number of sites)
; instrument (list/None): Specific instrument for the site (list - must match number of sites)
; calibration_scale (str): Measurement calibration scale to use
; obs_data_level (list/str): Measurement data quality level 
; filters (str): Data filtering approach to apply

inlet = ["185m", "90m"]
instrument = [None, None]
;calibration_scale = None
obs_data_level = [None, None]
;filters = ["localness"]
  
[INPUT.STORES]
; OpenGHG object stores for various data. NB. All data may come from the same 
;   object store. This facilitates using multiple object stores.
; bc_store (str): Name of object store with Boundary Conditions data
; obs_store (str): Name of object store with measurements data
; footprint_store (str): Name of object store with footprints data
; emissions_store (str): Name of flux emissions object store

bc_store = "paris_openghg_store"        ; (required) 
obs_store = "obs_store"       ; (required)
footprint_store = "paris_openghg_store"     ; (required)
emissions_store = "paris_openghg_store"     ; (required)

[INPUT.PRIORS]
; Input values for extracting footprints, emissions and boundary conditions files (also uses values from INPUT.MEASUREMENTS)
; domain (str): Name of inversion spatial domain e.g. "EUROPE"
; met_model (str/None):  e.g., 'UKV' or None if applies to all sites
; fp_model (str): Name of LPDM footprints e.g. "NAME"
; fp_height (list/str): List of footprint inlet heights used in model.
; fp_species (str): Species name associated with footprints in the object store (can be "inert")
; emissions_name (list): Name of emissions sources as used when adding flux files to the object store
; bc_input (list/str): Name of boundary conditions data to use from object store

domain = "EUROPE"           ; (required)
met_model = None
fp_model = None
fp_height = ["185m", "90m"]
fp_species = None
emissions_name = ["edgar-annual-total"]
bc_input = "camsv19"

[INPUT.BASIS_CASE]
; Input values to extract the basis cases to use within the inversion for boundary conditions and emissions
; basis_algorithm (str): Choice of basis function algorithm to use. One of "quadtree" or "weighted"
; bc_basis_case (str): Boundary conditions basis, defaults to "NESW" (looks for file format {bc_basis_case}_{domain}_*.nc)
; bc_basis_directory (str/None): Directory for bc_basis functions. If None provided, creates new folder in openghg_inversions
;                                expecting to find bc_basis_funciton files there. 
; fp_basis_case (str/None): Emissions bases:
; - if specified, looks for file format {fp_basis_case}_{domain}_*.nc
; - if None, creates basis function using algorithm specified and associated parameters
; nbasis: Number of basis functions to use for algorithm-specified basis function (rounded to %4) in domain
; basis_directory (str/None): Directory containing the basis functions (with domain name as subdirectories)
; country_file (str/None): Directory with filename  containing the indices of country boundaries in domain

basis_algorithm = "quadtree" 
bc_basis_case = "NESW"
fp_basis_case = None
nbasis = 50
basis_directory = "/group/chemistry/acrg/LPDM/basis_functions/"
bc_basis_directory = None
country_file = "/group/chemistry/acrg/PARIS_results_sharing/country_masks/EUROPE_EEZ_PARIS_gapfilled.nc"  

[MCMC.TYPE]
; Which MCMC setup to use. This defines the function which will be called and the expected inputs.
; Options include:
; - "fixed_basis"

mcmc_type = "fixed_basis"

[MCMC.PDF]
; Definitions of PDF shape and parameters for inputs
; xprior (dict): Emissions scale factor pdfs for fluxes
; bcprior (dict): Boundary conditions pdf
; sigprior (dict): Model error pdf
; add_offset (bool): Set as True to include offsetprior parameter
; offsetprior (dict): Model-data bias pdf 
;
; Each of these prior inputs should be dictionary with the name of probability distribution and shape parameters.
; See https://docs.pymc.io/api/distributions/continuous.html
; Current options for the "pdf" parameter include:

xprior   = {"pdf" : "normal", "mu" : 1.0, "sigma" : 1.0}
bcprior  = {"pdf" : "normal", "mu" : 1.0, "sigma" : 1.0}
sigprior = {"pdf" : "uniform", "lower" : 0.1, "upper" : 3.0}
;add_offset = False
;offsetprior = {}

[MCMC.BC_SPLIT]
; Boundary conditions setup
; bc_freq (str/optional): The period over which the baseline is estimated. e.g.
;  - None - one scaling for the whole inversion period
;  - "monthly" - per calendar monthly
;  - "*D" (e.g. "30D") - per number of days (e.g. 30 days)
; sigma_freq (str/optional): Same as bc_freq but for model
; sigma_per_site (bool): Whether a model sigma value is calculated for each site (True) or all together (False) 

bc_freq = "monthly"
sigma_freq = None
sigma_per_site = True

[MCMC.ITERATIONS]
; Iteration parameters
; nit (int): Number of iterations for MCMC
; burn (int): Number of iterations to burn/discard in MCMC
; tune (int): Number of iterations to use to tune step size

nit = 20000
burn = 10000
tune = 10000

[MCMC.NCHAIN]
; nchain (int): Number of chains to run simultaneously. Must be >=2 to allow convergence to be checked.

nchain = 4

[MCMC.OPTIONS]
; averagingerror (bool): Add variability in averaging period to the measurement error

averaging_error = True
min_error = 0.0
fix_basis_outer_regions = False
nuts_sampler = "numpyro"
save_trace = True
compute_min_error = True

[MCMC.OUTPUT]
; Details of where to write the output
; outputpath (str): Directory to write output
; outputname (str): Unique identifier for output/run name.

outputpath = "/group/chemistry/acrg/ES/"  ; (required)
outputname = "my_first_rhime_inversion"  ; (required)
