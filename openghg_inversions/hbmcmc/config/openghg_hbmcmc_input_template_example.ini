; --- Updated December 2022 ----
; Configuration file for OpenGHG_HBMCMC code
; Required inputs are marked as such.
; All other inputs are optional (defaults will be used)

[INPUT.MEASUREMENTS]
; Input values for extracting observations
;   species (str) - species name (see acrg_species_info.json for options) e.g. "ch4"
;   use_tracer (bool) - use tracer inversion model
;   sites (list) - site codes as a list (see acrg_site_info.json for options) e.g. ["MHD"]
;   averaging_period (list) - Time periods for measurements as a list (must match length of sites)
;   start_date (str) - Start of observations to extract (format YYYY-MM-DD)
;   end_date (str) - End of observations to extract (format YYYY-MM-DD) (non-inclusive)
; save_merged_data (bool) - If True, saves merged data object
; reload_merged_data (bool) - If True, reads merged data object rather than rerunning get_data
; merged_data_dir (str) - Path to directory with merged data objects.

species = "ch4"      ; (required)
use_tracer = False 
sites = ["TAC","RGL"]        ; (required)
averaging_period = ["4H","4H"]  ; (required)
start_date = "2019-01-01"   ; (required - but can be specified on command line instead)
end_date = "2019-02-01"     ; (required - but can be specified on command line instead)

save_merged_data = False
reload_merged_data = False
merged_data_dir = '/group/chemistry/acrg/'

; inlet (list/None) - Specific inlet height for the site (list - must match number of sites)
; instrument (list/None) - Specific instrument for the site (list - must match number of sites)
; filters (list/None) - Specify any data filtering to apply to observations 

inlet = ["185m","90m"]
instrument = [None, None]
;filters = ["localness"]
 
[INPUT.STORES]
; OpenGHG object stores for various data. NB. All data may come from the same 
; object store. This facilitates multiple object stores.
;   bc_store (str) - name of object store with BC data
;   obs_store (str) - name of object store with measurements data
;   footprint_store (str) - name of object store with footprints data
;   emissions_store (str) - emissions_store

bc_store="paris_openghg_store"        ; (required) 
obs_store="paris_openghg_store"       ; (required)
footprint_store="paris_openghg_store"     ; (required)
emissions_store="paris_openghg_store"     ; (required)


[INPUT.PRIORS]
; Input values for extracting footprints, emissions and boundary conditions files (also uses values from INPUT.MEASUREMENTS)
;   domain (str) - Name of inversion spatial domain e.g. 'EUROPE'
;   met_model (dict/str/None) - either dict corresponding to sites, str. e.g., 'UKV' or None if applies to all sites
;   fp_model (str) - Name of LPDM used for footprints e.g. 'NAME'
;   fp_height (list) - Inlet height used for footprints (sometimes differs from measurement inlet height e.g. Cabauw)
;   emissions_name (list) - List of the source keywords used for retrieving flux files from the object store

domain = "EUROPE"           ; (required)
met_model = "UKV"
fp_model = "NAME"
fp_height = ["185m","90m"]
emissions_name = ["edgar-annual-total"]
bc_input = "camsv19"

[INPUT.BASIS_CASE]
; Input values to extract the basis cases to use within the inversion for boundary conditions and emissions
;   basis_algorithm (str) - Select basis function algorithm to use to create basis functions, or use None when inputting a basis function file
;     - "quadtree" - use this input when using quadtree algorithm. NB. Does NOT create basis function regions that distinguish between land/sea
;     - "weighted" - use this input for generic weighted algorithm based on fp * emissions data. NB. DOES create basis function regions that distinguish between land/sea
;     - None - use None when using premade basis function file
;   bc_basis_case (str) - boundary conditions basis, defaults to "NESW" (looks for file format {bc_basis_case}_{domain}_*.nc)
;   fp_basis_case (str/None) - emissions bases:
;     - if specified, looks for file format {fp_basis_case}_{domain}_*.nc
;     - if None, creates basis function using quadtree algorithm and associated parameters
;   nbasis - Number of basis functions to use for quadtree derived basis function (rounded to %4)
;   basis_directory (str/None) - Directory containing the basis functions (with domain name as subdirectories)
;   bc_basis_directory (str/None) - Directory containing the boundary condition basis functions NB. Defaults to dir in OpenGHG_Inversions
;   country_file (str/None) - Directory to the country definitions file


basis_algorithm = "quadtree" 
bc_basis_case = "NESW"
fp_basis_case = None
nbasis = 100
basis_directory = "/group/chemistry/acrg/LPDM/basis_functions/"
bc_basis_directory = None
country_file = "/user/work/wz22079/country_masks/country-EUROPE-UKMO-2023.nc"  


[MCMC.TYPE]
; Which MCMC setup to use. This defines the function which will be called and the expected inputs.
; Options include:
;   "fixed_basis"

mcmc_type = "fixed_basis"

[MCMC.PDF]
; Definitions of PDF shape and parameters for inputs
;   xprior (dict) - emissions
;   bcprior (dict) - boundary conditions
;   sigprior (dict) - model error
; Each of these inputs should be dictionary with the name of probability distribution and shape parameters.
; See https://docs.pymc.io/api/distributions/continuous.html
; Current options for the "pdf" parameter include:
; - "lognormal" - Log-normal log-likelihood.
;   o "mu" (float) - Location parameter
;   o "sd" or "sigma" (float) - Standard deviation (> 0)
; e.g. {"pdf":"lognormal", "mu":1, "sd":1}
;
; - "uniform" - Continuous uniform log-likelihood.
;   o "lower" (float) - Lower limit
;   o "upper" (float) - Upper limit
; e.g. {"pdf":"uniform", "lower":0.5, "upper":3}
;
; - "halfflat" - Improper flat prior over the positive reals. (no additional parameters necessary)
; e.g. {"pdf":"halfflat"}

xprior   = {"pdf":"lognormal", "mu":0.346573, "sigma":0.693147}
bcprior  = {"pdf":"lognormal", "mu":0.346573, "sigma":0.693147}
sigprior = {"pdf":"uniform", "lower":0.1, "upper":3.0}

[MCMC.BC_SPLIT]
; Boundary conditions setup
;   bc_freq - The period over which the baseline is estimated. e.g.
;    - None - one scaling for the whole inversion
;    - "monthly" - per calendar monthly
;    - "*D" (e.g. "30D") - per number of days (e.g. 30 days)

bc_freq = "monthly"
sigma_freq = None
sigma_per_site = True

[MCMC.ITERATIONS]
; Iteration parameters
;   nit (int) - Number of iterations for MCMC
;   burn (int) - Number of iterations to burn in MCMC
;   tune (int) - Number of iterations to use to tune step size

nit = 2.5e5 
burn = 50000
tune = 1.25e4

[MCMC.NCHAIN]
; Number of chains to run simultaneously. Must be >=2 to allow convergence to be checked.

nchain = 2

[MCMC.ADD_ERROR]
; Add variability in averaging period to the measurement error

averaging_error = True

[MCMC.OUTPUT]
; Details of where to write the output
; outputpath (str) - directory to write output
; outputname (str) - unique identifier for output/run name.

outputpath = "/user/work/wz22079/hbmcmc_es_tests/"  ; (required)
outputname = "test_250000it"  ; (required)
