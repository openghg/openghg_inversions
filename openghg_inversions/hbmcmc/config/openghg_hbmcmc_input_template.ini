; =======================================================================================
; Regional Hierarchical Inverse Modelling Environment Configuration File
; =======================================================================================
; RHIME-with-OpenGHG example configuration file  
; Please check through variable paths and names before running
; This can be done using openghg.retrieve.search() in Python
; and specifying the relevant object stores and other variables 
; Required inputs are marked
; All other inputs are optional (defaults will be used)
; ======================================================================================= 

[INPUT.GENERAL]
; ---- Model-wide inputs ----
; species (str): Atmospheric trace gas species of interest
; start_date (str): Start of period of interest (format YYYY-MM-DD)
; end_date (str): End of period of interest (format YYYY-MM-DD)

species = " "                               ; (required)
start_date = " "                            ; (required)
end_date = " "                              ; (required)


[INPUT.MEASUREMENTS]
; ---- Observations data inputs ----
; obs_store (str): Name of OpenGHG object store containing atmospheric observations                         
; use_tracer (bool): True: Uses gas tracer method for inversions
;                    False: Uses standard mole fractions method for inversions
; sites (list): Site codes as a list e.g. ["MHD"]
; averaging_period (list): Averaged time periods for measurements as a list 
;                          (must match length of sites)
; inlet (list/None): Measurement inlet heights for each measurement site
;                    Inlet should be specified for sites with multiple inlets    
; instrument (list/None): Instrument used for measurements at each site of interest
; calibration_scale (str): Specify calibration scale to use for measurements
; obs_data_level (str/int): Specify measurements data-quality level. Applies only to
;                           ICOS data (as of 13 May 2024)
; filters (str): Approach for filtering observations data 
;                Options include:
;                  "daytime": Selects data between 11.00 and 15.00 local solar time
;                  "daytime9to5": Selects data between 09.00 and 17.00 local solar time
;                  "nighttime": Only b/w 23.00 - 03.00 inclusive
;                  "noon": Only 12.00 fp and obs used
;                  "daily_median": Calculates the daily median
;                  "pblh": Only keeps times when pblh is > 50m away from the obs height
;                  "local_influence": Removes times when > 10% of footprint sensitivity
;                                     is in the surrounding nine cells of the site

obs_store = " "                             ; (required)
use_tracer = False                          ; (required)
sites = []                                  ; (required)
averaging_period = []                       ; (required)
inlet = []
instrument = []
calibration_scale =
obs_data_level = []
filters = []


[INPUT.ATMOS_MODEL]
; ---- Atmospheric transport model inputs ----
; footprint_store (str): Name of OpenGHG object store with footprints data 
; domain (str): Name of model domain associated with footprints of interest
;               e.g. "EUROPE"
; met_model (str/None): Meteorological fields used in atmospheric transport model 
;                       footprints e.g. "UKV" or None if applies to all sites
; fp_model (str/None): Name of atmospheric transport model used to generate  footprints 
;                      e.g. "NAME"
; fp_height (list/str): List of footprint inlet heights used in model
; fp_species (str): Species name associated with footprints in the object store 
;                   e.g. "inert", "co2", 

footprint_store = " "                       ; (required)
domain = " "                                ; (required)
met_model = 
fp_model = 
fp_height = []
fp_species = 


[INPUT.PRIORS]
; ---- Prior input data ---- 
; use_bc (bool): True: Uses boundary conditions mole fractions and solves for
;                      these in inversion
;                False: No boundary conditions are used in the inversion. This
;                       implicitly assumes that contributions from the boundary 
;                       have been subtracted from the observations 
; emissions_store (str): Name of OpenGHG object store with flux emissions data
; bc_store (str): Name of OpenGHG object store with boundary conditions data
; emissions_name (list): Name of emissions sources that correspond with flux files
; bc_input (list/str): Name of boundary conditions data to use from object store
; bc_freq (str/optional): The period over which the baseline is estimated. e.g.
;                           None: One scaling for the whole inversion period
;                           "monthly": Per calendar monthly
;                           "*D" (e.g. "30D"): Per number of days (e.g. 30 days)
; sigma_freq (str/optional): Same as bc_freq but for model
; sigma_per_site (bool): True: Calculates a model sigma value for each site 
;                        False: Calculates model sigma value for  all sites 

use_bc = True
emissions_store = " "                       ; (required)
bc_store = " "                              ; (required)
emissions_name = [" "]
bc_input = " "
bc_freq = " "
sigma_freq = 
sigma_per_site =


[INPUT.BASIS_CASE]
; ---- Basis functions inputs ----
; basis_algorithm (str/None): Choice of basis function algorithm to use for fluxes 
;                             Options include:
;                               "quadtree": Uses a quadtree algorithm to calculate 
;                                           basis function regions. Does not distinguish
;                                           land and sea regions of model domain.
;                               "weighted": Splits model domain into N regions of similar
;                                           data value. Distinguishes between land-ocean
;                                           regions in EUROPE model-domain
;                               None: Use this option if specifying a basis function file
; nbasis (int/None): Number of basis functions to use for algorithm-specified emissions
;                    basis functions. Rounds to %4 in quadtree
; fix_basis_outer_regions (bool): True: Treats InTEM-defined outer regions of flux model 
;                                       domain as "fixed" i.e. these regions are always 
;                                       defined in the same way, spatially - using a 
;                                       UKMO file
;                                 False: Outer regions are included in the calculation
;                                        of flux basis functions
; fp_basis_case (str/None): Basis function file for emissions. If using basis_algorithm
;                           use "None". Otherwise looks for files of the format
;                           {fp_basis_case}_{domain}.nc in basis_directory 
; basis_directory (str/None): Directory containing the basis functions 
;                             (with domain name as subdirectories)
; bc_basis_case (str): Boundary conditions basis. Defaults to "NESW" 
;                      Looks for files of  format {bc_basis_case}_{domain}_*.nc
; bc_basis_directory (str/None): Directory for bc_basis functions. If None provided, 
;                                creates new folder in openghg_inversions
;                                expecting to find bc_basis_funciton files there 

basis_algorithm = " "
nbasis = 
fix_basis_outer_regions = 
fp_basis_case = 
basis_directory = " "
bc_basis_case = " "
bc_basis_directory = 


[MCMC.TYPE]
; ---- MCMC setup ---- 
; This defines the function which will be called and the expected inputs
; Options include:
;   "fixed_basis"

mcmc_type = "fixed_basis"


[MCMC.PDF]
; ---- MCMC PDFs for apriori data ---- 
; Definitions of PDF shape and parameters for inputs
; xprior (dict): Emissions scale factor pdfs for fluxes
; bcprior (dict): Boundary conditions pdf
; sigprior (dict): Model error (fraction of pollution events) parameter pdf
; add_offset (bool):  True: Includes offsetprior parameter to solve for
;                           mole fraction biases
;                     False: Does not solve or impose bias PDF
; offsetprior (dict): Model-data bias pdf 
;
; Each of these prior inputs should be dictionary with the name of probability 
; distribution and shape parameters.
; See https://docs.pymc.io/api/distributions/continuous.html
; Current options for the "pdf" parameter include (CHOOSE WISELY):
;   "Uniform" 
;   "Flat" 
;   "HalfFlat" 
;   "Normal" 
;   "TruncatedNormal"
;   "Beta"
;   "Kumaraswamy"
;   "Exponential"
;   "Laplace"
;   "StudentT"
;   "Cauchy"
;   "HalfCauchy"
;   "Gamma" 
;   "Weibull"
;   "HalfStudentT"
;   "LogNormal"
;   "ChiSquared"
;   "HalfNormal"
;   "Wald"
;   "Pareto"
;   "InverseGamma"
;   "ExGaussian" 
;   "VonMises"
;   "SkewNormal"
;   "Triangular",
;   "Gumbel"
;   "Logistic"
;   "LogitNormal"
;   "Interpolated"
;   "Rice"
;   "Moyal"
;   "AsymmetricLaplace"
;   "PolyaGamma"
;
; Please note the PDF values used in this example file should not be used for 
; scientific purposes. The normal distributions used below could lead
; to unphysical solutions (i.e. negative values) but serve as the most 
; intuitive way of understanding the inversion framework and for getting 
; to grips with the model setup 

xprior   = {"pdf": "normal", "mu": 1.0, "sigma": 1.0}
bcprior  = {"pdf": "normal", "mu": 1.0, "sigma": 1.0}
sigprior = {"pdf": "uniform", "lower": 0.1, "upper": 3.0}
add_offset = False
offsetprior = {}


[MCMC.OPTIONS]
; ---- MCMC Sampler Options ----
; nchain (int): Number of chains to run simultaneously. 
;               Must be >=2 to allow convergence to be checked.
; nuts_sampler (str): Defaults to "pymc". The other option is "numpyro", 
;                     which will use the JAX accelerated sampler
;                     from Numpyro; this tends to be significantly faster 
;                     than the NUTS sampler built into PyMC
; nit (int): Number of iterations for MCMC
; burn (int): Number of iterations to burn/discard in MCMC
; tune (int): Number of iterations to use to tune step size

nchain = 
nuts_sampler = " "
nit =
burn =
tune =


[MCMC.ERRORS]
; ---- Model-data uncertainty inputs ----
; averaging_error (bool): Add variability in averaging period to the 
;                         measurement error (Note: currently this
;                         doesn't work correctly)
; calculate_min_error (bool): computes min_error on the fly 
;                             using the "residual error method"
; min_error (float): Specify a lower bound for the model-measurement 
;                    mismatch error (i.e. the error on (y - y_mod)) 
;                    Ignored if calculate_min_error = True.
; pollution_events_from_obs (bool): True: Uses the measured baseline enhancement to
;                                         calculate the model error
;                                   False: Uses the prior simulated baseline enhancement
;                                          to calculate the model error

averaging_error = 
calculate_min_error = 
min_error = 0.0
pollution_events_from_obs = 


[MCMC.POST_PROCESSING]
; ---- Specify file and variables used for post-processing ----
; country_file (str/None): Directory with filename containing the country mask for
;                          model domain of interest

country_file = "/group/chemistry/acrg/PARIS_results_sharing/country_masks/EUROPE_EEZ_PARIS_gapfilled.nc"


[MCMC.OUTPUT]
; ---- Specify where to write output data ----
; save_trace (bool): True: The arviz InferenceData output from sampling will be saved 
;                          to the output path of the inversion, with a file name of the  
;                          form f"{outputname}{start_data}_trace.nc. Alternatively,  
;                          a path (including filename) can be passed
;                    False: Does not save trace
; save_merged_data (bool): True: Saves merged data object (i.e. forward simulations)
;                          False: Does not save merged data
; reload_merged_data (bool): True: Reads merged data object rather than rerunning 
;                            'get_data'
;                            False: Calculates merged data object
; merged_data_dir (str): Path to directory with merged data objects
; outputpath (str): Directory to write RHIME model output
; outputname (str): Unique identifier for output/run name

save_trace = 
save_merged_data = 
reload_merged_data = 
merged_data_dir = " "
outputpath =                                ; (required)
outputname =                                ; (required)
                                                                                                                                                                                                     288,20        Bot




